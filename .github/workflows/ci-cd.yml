name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - develop
      - main
      - 'release/**'

jobs:
  backend:
    name: 🚀 Backend · Lint & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v3

      - name: 📦 Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.x'
          check-latest: true
          cache: 'pip'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🧹 Run Flake8
        run: flake8 .

      - name: 🎨 Check formatting with Black
        run: black --check .

      - name: 🧪 Run Pytest
        run: pytest

  deploy:
    name: 🚀 Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [backend]
    if: |
      github.ref == 'refs/heads/develop' || 
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'pull_request' && github.base_ref == 'develop') ||
      (github.event_name == 'pull_request' && github.base_ref == 'main')
    timeout-minutes: 5
    
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
      
      - name: Check if secrets are set
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "❌ GCP_SA_KEY secret is NOT set"
            exit 1
          else
            echo "✅ GCP_SA_KEY secret is available"
          fi
          
          if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
            echo "❌ GCP_PROJECT_ID secret is NOT set"
            exit 1
          else
            echo "✅ GCP_PROJECT_ID secret is available"
          fi

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Authenticate to GCP
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > "${HOME}/gcp-key.json"
          gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json"
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy srs-document-generator \
            --source . \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=production"